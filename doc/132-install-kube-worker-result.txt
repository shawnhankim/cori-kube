[root@ip-10-0-0-110 ~]# #!/bin/bash
[root@ip-10-0-0-110 ~]#
[root@ip-10-0-0-110 ~]# #-----------------------------------------------------------------------------#
[root@ip-10-0-0-110 ~]# #                                                                             #
[root@ip-10-0-0-110 ~]# #   Install Kubernetes components into worker node                            #
[root@ip-10-0-0-110 ~]# #                                                                             #
[root@ip-10-0-0-110 ~]# #-----------------------------------------------------------------------------#
[root@ip-10-0-0-110 ~]#
[root@ip-10-0-0-110 ~]# # Change root user
[root@ip-10-0-0-110 ~]# sudo -i
[root@ip-10-0-0-110 ~]#
[root@ip-10-0-0-110 ~]# # Join worker node to master node
[root@ip-10-0-0-110 ~]# kubeadm join 10.0.0.45:6443 --token eqzaye.rk8hsl5qswwhdpkp --discovery-token-ca-cert-hash sha256:1f6c58b93ebb38654268a65a5e29c74a09f8b5f9309515028e0c043e3d18c2d1
[preflight] running pre-flight checks
	[WARNING RequiredIPVSKernelModulesAvailable]: the IPVS proxier will not be used, because the following required kernel modules are not loaded: [ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh] or no builtin kernel ipvs support: map[ip_vs:{} ip_vs_rr:{} ip_vs_wrr:{} ip_vs_sh:{} nf_conntrack_ipv4:{}]
you can solve this problem with following methods:
 1. Run 'modprobe -- ' to load missing kernel modules;
2. Provide the missing builtin kernel ipvs support

[discovery] Trying to connect to API Server "10.0.0.45:6443"
[discovery] Created cluster-info discovery client, requesting info from "https://10.0.0.45:6443"
[discovery] Requesting info from "https://10.0.0.45:6443" again to validate TLS against the pinned public key
[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server "10.0.0.45:6443"
[discovery] Successfully established connection with API Server "10.0.0.45:6443"
[kubelet] Downloading configuration for the kubelet from the "kubelet-config-1.12" ConfigMap in the kube-system namespace
[kubelet] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[preflight] Activating the kubelet service
[tlsbootstrap] Waiting for the kubelet to perform the TLS Bootstrap...
[patchnode] Uploading the CRI Socket information "/var/run/dockershim.sock" to the Node API object "ip-10-0-0-110.us-west-2.compute.internal" as an annotation

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the master to see this node join the cluster.


[root@ip-10-0-0-45 ~]# kubectl get nodes
NAME                                      STATUS   ROLES    AGE   VERSION
ip-10-0-0-45.us-west-2.compute.internal   Ready    master   14m   v1.12.2
ip-10-0-0-7.us-west-2.compute.internal    Ready    <none>   56s   v1.12.2



[root@ip-10-0-0-45 ~]# kubeadm token list
TOKEN                     TTL       EXPIRES                USAGES                   DESCRIPTION                                                EXTRA GROUPS
eqzaye.rk8hsl5qswwhdpkp   23h       2018-11-07T22:40:14Z   authentication,signing   The default bootstrap token generated by 'kubeadm init'.   system:bootstrappers:kubeadm:default-node-token